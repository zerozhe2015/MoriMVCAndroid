package com.moriarty.morimvcandroid.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import com.moriarty.morimvcandroid.model.entities.FunctionBean;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "FUNCTION_BEAN".
*/
public class FunctionBeanDao extends AbstractDao<FunctionBean, Long> {

    public static final String TABLENAME = "FUNCTION_BEAN";

    /**
     * Properties of entity FunctionBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property FunctionId = new Property(0, Long.class, "functionId", true, "_id");
        public final static Property Id = new Property(1, int.class, "id", false, "ID");
        public final static Property Mark = new Property(2, int.class, "mark", false, "MARK");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Code = new Property(4, String.class, "code", false, "CODE");
        public final static Property NotOpen = new Property(5, boolean.class, "notOpen", false, "NOT_OPEN");
    }


    public FunctionBeanDao(DaoConfig config) {
        super(config);
    }
    
    public FunctionBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FUNCTION_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: functionId
                "\"ID\" INTEGER NOT NULL ," + // 1: id
                "\"MARK\" INTEGER NOT NULL ," + // 2: mark
                "\"NAME\" TEXT," + // 3: name
                "\"CODE\" TEXT," + // 4: code
                "\"NOT_OPEN\" INTEGER NOT NULL );"); // 5: notOpen
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FUNCTION_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FunctionBean entity) {
        stmt.clearBindings();
 
        Long functionId = entity.getFunctionId();
        if (functionId != null) {
            stmt.bindLong(1, functionId);
        }
        stmt.bindLong(2, entity.getId());
        stmt.bindLong(3, entity.getMark());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(5, code);
        }
        stmt.bindLong(6, entity.getNotOpen() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FunctionBean entity) {
        stmt.clearBindings();
 
        Long functionId = entity.getFunctionId();
        if (functionId != null) {
            stmt.bindLong(1, functionId);
        }
        stmt.bindLong(2, entity.getId());
        stmt.bindLong(3, entity.getMark());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(5, code);
        }
        stmt.bindLong(6, entity.getNotOpen() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FunctionBean readEntity(Cursor cursor, int offset) {
        FunctionBean entity = new FunctionBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // functionId
            cursor.getInt(offset + 1), // id
            cursor.getInt(offset + 2), // mark
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // code
            cursor.getShort(offset + 5) != 0 // notOpen
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FunctionBean entity, int offset) {
        entity.setFunctionId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setId(cursor.getInt(offset + 1));
        entity.setMark(cursor.getInt(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNotOpen(cursor.getShort(offset + 5) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FunctionBean entity, long rowId) {
        entity.setFunctionId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FunctionBean entity) {
        if(entity != null) {
            return entity.getFunctionId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FunctionBean entity) {
        return entity.getFunctionId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
